import fs from "fs";
import path from "path";
import { parseEnv } from "../utils/parseEnv.js";
import chalk from "chalk";

export default function generate(file, options = {}) {
  try {
    // Validate input
    if (!file) {
      console.error(chalk.red("❌ Error: File path is required"));
      process.exit(1);
    }

    const env = parseEnv(file);
    const keys = Object.keys(env);

    if (keys.length === 0) {
      console.log(
        chalk.yellow("⚠️  Warning: No valid environment variables found")
      );
      process.exit(0);
    }

    // Determine output file
    const outputFile = options.output || ".env.example";

    // Generate content with comments
    const exampleContent = [
      "# Generated by ShieldX",
      `# Source: ${file}`,
      `# Date: ${new Date().toISOString()}`,
      "",
      ...keys.map((k) => `${k}=`),
    ].join("\n");

    // Check if file exists and warn
    if (fs.existsSync(outputFile) && !options.force) {
      console.log(
        chalk.yellow(
          `⚠️  ${outputFile} already exists. Use --force to overwrite.`
        )
      );
      process.exit(1);
    }

    fs.writeFileSync(outputFile, exampleContent);

    if (options.json) {
      console.log(
        JSON.stringify(
          {
            success: true,
            sourceFile: file,
            outputFile,
            keysGenerated: keys.length,
            keys,
          },
          null,
          2
        )
      );
    } else {
      console.log(
        chalk.green(`✅ Generated ${outputFile} with ${keys.length} keys`)
      );
      if (options.verbose) {
        console.log(chalk.gray("\nKeys included:"));
        keys.forEach((key) => console.log(chalk.gray(`  - ${key}`)));
      }
    }

    process.exit(0);
  } catch (err) {
    console.error(chalk.red(`❌ Error: ${err.message}`));
    process.exit(1);
  }
}
